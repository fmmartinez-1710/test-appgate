---
AWSTemplateFormatVersion: 2010-09-09

Description: Creates New VPC

Metadata:

  Authors:
    Description: Fabian Martinez (fabian.martinezn1989@outlook.com)
  
  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label:
        default: Amazon VPC Parameters
      Parameters:
      - NumberOfAZs
      - AvailabilityZones
      - VpcCidr
      - VpcTenancy
      - PublicSubnet0Cidr
      - PublicSubnet1Cidr
      - PrivateWebSubnet0Cidr
      - PrivateWebSubnet1Cidr
      - PrivateWebSubnet2Cidr
      - PrivateWebSubnet3Cidr
      
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      NumberOfAZs:
        default: Number of Availability Zones
      VpcCidr:
        default: VpcCidr
      VpcTenancy:
        default: VpcTenancy
      PublicSubnet0Cidr:
        default: Public Subnet 0
      PublicSubnet1Cidr:
        default: Public Subnet 1
      PrivateWebSubnet0Cidr:
        default: Web Subnet 0
      PrivateWebSubnet1Cidr:
        default: Web Subnet 1
      PrivateWebSubnet2Cidr:
        default: Web Subnet 2
      PrivateWebSubnet3Cidr:
        default: Web Subnet 3
      
Parameters:

  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Default: 3
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.0/24
    Description: CIDR block for the VPC
    Type: String
  VpcTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  PrivateWebSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.0/28
    Description: CIDR block for Web Subnet 2 located in Availability Zone 0
    Type: String
  PrivateWebSubnet3Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.16/28
    Description: CIDR block for Web Subnet 3 located in Availability Zone 1
    Type: String
  PublicSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.32/28
    Description: CIDR block for Public subnet 0 located in Availability Zone 0
    Type: String
  PublicSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.48/28
    Description: CIDR block for Public subnet 1 located in Availability Zone 1
    Type: String
  PrivateWebSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.64/28
    Description: CIDR block for Web subnet 0 located in Availability Zone 0
    Type: String
  PrivateWebSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.1.96.80/28
    Description: CIDR block for Web subnet 1 located in Availability Zone 1
    Type: String
  
Conditions:

  NumberOfAZs1:
      !Equals [ '1', !Ref NumberOfAZs ]
  NumberOfAZs2:
      !Equals [ '2', !Ref NumberOfAZs ]
  NumberOfAZs3:
      !Equals [ '3', !Ref NumberOfAZs ]
  NumberOfAZs4:
      !Equals [ '4', !Ref NumberOfAZs ]
  NumberOfAZs5:
      !Equals [ '5', !Ref NumberOfAZs ]
  NumberOfAZs6:
      !Equals [ '6', !Ref NumberOfAZs ]
  AZ0: !Or
    - !Condition NumberOfAZs1
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ1: !Or
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ2: !Or
    - !Condition NumberOfAZs3
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ3: !Or
    - !Condition NumberOfAZs4
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ4: !Or
    - !Condition NumberOfAZs5
    - !Condition NumberOfAZs6
  AZ5: !Condition NumberOfAZs6

Resources:

  WebSubnet0:
    Condition: AZ0
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateWebSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  WebSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateWebSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  
  WebSubnetRouteTableAssociation0:
    Condition: AZ0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref WebSubnet0
  WebSubnetRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet1
  
  WebSubnet2:
    Condition: AZ0
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateWebSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet2 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  WebSubnet3:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PrivateWebSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WebSubnet3 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc
  
  WebSubnetRouteTableAssociation2:
    Condition: AZ0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref WebSubnet2
  WebSubnetRouteTableAssociation3:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet3
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  NatEIP0:
    Condition: AZ0
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway0:
    Condition: AZ0
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
  NatRoute0:
    Condition: AZ0
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0
  NatRouteTable0:
    Condition: AZ0
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable0 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc

  NatEIP1:
    Condition: AZ1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway1:
    Condition: AZ1
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatRoute1:
    Condition: AZ1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatRouteTable1:
    Condition: AZ1
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc
  PublicRouteTableAssociation0:
    Condition: AZ0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet0:
    Condition: AZ0
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet0Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc
  PublicSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Vpc / ', !Ref 'AWS::StackName' ] ]
  
Outputs:
  
  Vpc:
    Value: !Ref Vpc
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet0:
    Condition: AZ0
    Value: !Ref PublicSubnet0
  PublicSubnet1:
    Condition: AZ1
    Value: !Ref PublicSubnet1
  WebSubnet0:
    Condition: AZ0
    Value: !Ref WebSubnet0
  WebSubnet1:
    Condition: AZ1
    Value: !Ref WebSubnet1
  WebSubnet2:
    Condition: AZ0
    Value: !Ref WebSubnet2
  WebSubnet3:
    Condition: AZ1
    Value: !Ref WebSubnet3
  
  WebSubnet0:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref WebSubnet2,
        !If
          [ NumberOfAZs2,
          !Join [ ',', [ !Ref WebSubnet2, !Ref WebSubnet3 ] ],
          !If
            [ NumberOfAZs3,
            !Join [ ',', [ !Ref WebSubnet2, !Ref WebSubnet3 ] ],
            !If
              [ NumberOfAZs4,
              !Join [ ',', [ !Ref WebSubnet2, !Ref WebSubnet3 ] ],
              !If
                [ NumberOfAZs5,
                !Join [ ',', [ !Ref WebSubnet2, !Ref WebSubnet3 ] ],
                !Join [ ',', [ !Ref WebSubnet2, !Ref WebSubnet3 ] ]
                ]
              ]
            ]
          ]
        ] 
  WebSubnet1:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref WebSubnet0,
        !If
          [ NumberOfAZs2,
          !Join [ ',', [ !Ref WebSubnet0, !Ref WebSubnet1 ] ],
          !If
            [ NumberOfAZs3,
            !Join [ ',', [ !Ref WebSubnet0, !Ref WebSubnet1 ] ],
            !If
              [ NumberOfAZs4,
              !Join [ ',', [ !Ref WebSubnet0, !Ref WebSubnet1 ] ],
              !If
                [ NumberOfAZs5,
                !Join [ ',', [ !Ref WebSubnet0, !Ref WebSubnet1 ] ],
                !Join [ ',', [ !Ref WebSubnet0, !Ref WebSubnet1 ] ]
                ]
              ]
            ]
          ]
        ] 
  PublicSubnet:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref PublicSubnet0,
        !If
          [ NumberOfAZs2,
          !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ],
          !If
            [ NumberOfAZs3,
            !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ],
            !If
              [ NumberOfAZs4,
              !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ],
              !If
                [ NumberOfAZs5,
                !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ],
                !Join [ ',', [ !Ref PublicSubnet0, !Ref PublicSubnet1 ] ]
                ]
              ]
            ]
          ]
        ] 

